<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConA1000Description" xml:space="preserve">
    <value>Inconsistent const-ness of unmodified variable</value>
  </data>
  <data name="ConA1000MessageFormat" xml:space="preserve">
    <value>'{0}' can be made constant</value>
  </data>
  <data name="ConA1000Title" xml:space="preserve">
    <value>Variable can be made constant</value>
  </data>
  <data name="ConA1602Description" xml:space="preserve">
    <value>Inconsistent documentation of enumeration element</value>
  </data>
  <data name="ConA1602MessageFormat" xml:space="preserve">
    <value>'{0}' can be documented</value>
  </data>
  <data name="ConA1602Title" xml:space="preserve">
    <value>Enumeration element can be documented</value>
  </data>
  <data name="ConA1700Description" xml:space="preserve">
    <value>Use regions for all class code or not at all</value>
  </data>
  <data name="ConA1700MessageFormat" xml:space="preserve">
    <value>'{0}' is missing regions</value>
  </data>
  <data name="ConA1700Title" xml:space="preserve">
    <value>Class is missing regions</value>
  </data>
  <data name="ConA1701Description" xml:space="preserve">
    <value>Avoid nested regions and refactor the code or use partial classes instead</value>
  </data>
  <data name="ConA1701MessageFormat" xml:space="preserve">
    <value>Region '{0}' is nested within region '{1}'</value>
  </data>
  <data name="ConA1701Title" xml:space="preserve">
    <value>Do not use nested regions</value>
  </data>
  <data name="ConA1702Description" xml:space="preserve">
    <value>A public member of a class is not the same region as other public members</value>
  </data>
  <data name="ConA1702MessageFormat" xml:space="preserve">
    <value>Class member '{0}' is not within region '{1}'</value>
  </data>
  <data name="ConA1702Title" xml:space="preserve">
    <value>Public member outside the expected region</value>
  </data>
  <data name="ConA1703Description" xml:space="preserve">
    <value>A protected member of a class is not the same region as other protected members</value>
  </data>
  <data name="ConA1703MessageFormat" xml:space="preserve">
    <value>Class member '{0}' is not within region '{1}'</value>
  </data>
  <data name="ConA1703Title" xml:space="preserve">
    <value>Protected member outside the expected region</value>
  </data>
  <data name="ConA1704Description" xml:space="preserve">
    <value>A public constructor of a class is not the same region as other public constructors</value>
  </data>
  <data name="ConA1704MessageFormat" xml:space="preserve">
    <value>Class constructor '{0}' is not within region '{1}'</value>
  </data>
  <data name="ConA1704Title" xml:space="preserve">
    <value>Public constructor outside the expected region</value>
  </data>
  <data name="ConA1705Description" xml:space="preserve">
    <value>A public field of a class is not the same region as other public fields</value>
  </data>
  <data name="ConA1705MessageFormat" xml:space="preserve">
    <value>Field '{0}' is not within region '{1}'</value>
  </data>
  <data name="ConA1705Title" xml:space="preserve">
    <value>Public field outside the expected region</value>
  </data>
  <data name="ConA1706Description" xml:space="preserve">
    <value>A public method of a class is not the same region as other public methods</value>
  </data>
  <data name="ConA1706MessageFormat" xml:space="preserve">
    <value>Method '{0}' is not within region '{1}'</value>
  </data>
  <data name="ConA1706Title" xml:space="preserve">
    <value>Public method outside the expected region</value>
  </data>
  <data name="ConA1707Description" xml:space="preserve">
    <value>A public property of a class is not the same region as other public properties</value>
  </data>
  <data name="ConA1707MessageFormat" xml:space="preserve">
    <value>Property '{0}' is not within region '{1}'</value>
  </data>
  <data name="ConA1707Title" xml:space="preserve">
    <value>Public property outside the expected region</value>
  </data>
</root>